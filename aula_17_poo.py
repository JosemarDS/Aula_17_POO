# -*- coding: utf-8 -*-
"""Aula_17_POO

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kL_nw_He4X0xcj34IegvlkNCNaifa2qJ

PROGRAMAÇÃO ORIENTADA A OBJETOS

Programação Orientada a Objetos (POO) é um paradigma de programação que se baseia no conceito de "objetos" para organizar e estruturar o código de um programa. Nesse paradigma, o foco principal é modelar o mundo real em termos de objetos, cada um dos quais representa uma entidade que possui atributos (dados) e métodos (comportamentos) relacionados a ela. A POO é uma maneira eficaz de abstrair e organizar complexidade em sistemas de software.
# Objeto:

Um objeto é uma instância concreta de uma classe. Ele é uma entidade que possui atributos (variáveis) para armazenar dados e métodos (funções) para realizar operações relacionadas a esses dados. Por exemplo, em um programa de gerenciamento de biblioteca, um objeto "Livro" pode ter atributos como título, autor e número de páginas, bem como métodos para emprestar, devolver e exibir informações sobre o livro.
# Classe:

Uma classe é um modelo ou uma "receita" que define a estrutura e o comportamento dos objetos. Ela especifica quais atributos e métodos os objetos dessa classe terão. Por exemplo, a classe "Livro" pode definir os atributos título e autor, bem como os métodos emprestar e devolver.
# Atributos:

Os atributos são variáveis que pertencem a um objeto e representam dados específicos relacionados a esse objeto. Em uma classe de carro, os atributos podem incluir cor, modelo e ano de fabricação.
# Métodos:

Os métodos são funções definidas em uma classe que realizam operações relacionadas a objetos dessa classe. Eles podem acessar e manipular os atributos do objeto. Em uma classe de carro, os métodos podem incluir "ligar", "desligar" e "acelerar".
# Herança:

A herança é um conceito que permite criar uma nova classe com base em uma classe existente. A nova classe herda os atributos e métodos da classe existente e pode adicionar ou substituir comportamentos conforme necessário. Isso promove a reutilização de código e a criação de hierarquias de classes
# Encapsulamento:

O encapsulamento é um princípio que envolve o agrupamento de atributos e métodos relacionados em uma classe e o controle do acesso a esses membros. Em muitas linguagens de programação orientadas a objetos, como Python, você pode definir a visibilidade dos membros de uma classe como público, protegido ou privado.
# Polimorfismo:

O polimorfismo é a capacidade de objetos de diferentes classes responderem a uma mesma mensagem (chamada de método) de maneira apropriada. Isso permite que você escreva código que funcione com objetos de diferentes tipos de maneira uniforme, aumentando a flexibilidade e a extensibilidade do código.
# ABSTRAÇÃO:

![puppy_icon_134477.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/4601018a-0674-4360-b15f-63e10fde87a2/36be22f4-4f0a-4934-84b5-689a4a5e29a7/puppy_icon_134477.png)

- **OBJETO É O FILHO DA CLASSE, PODE SER CONSIDERADO UM FILHOTE  -  OBJETOS**
- **FILHOTES HERDAM CARACTERISTICAS DE SUAS MÃES  -  ATRIBUTOS**
- **EXISTEM CORES E CARACTERISTICAS QUE NÃO SERÃO HERDADAS, OU VISUALIZADA  - ENCAPSULAMENTO**
- **EXISTEM RAÇAS DE CACHORROS MAIS RAPIDAS, MAIS INTELIGENTES E MAIS QUIETAS - POLIFORMISMO**
- **TODOS OS CACHORROS LATEM , ANDAM , MORDEM  -  MÉTODO**S

A programação orientada a objetos é amplamente utilizada na indústria de software devido à sua capacidade de modelar problemas complexos de maneira mais clara e organizada. Ela promove a modularidade, a reutilização de código e a manutenção facilitada, tornando-a uma abordagem valiosa para o desenvolvimento de software.
"""

class Car:
     def __init__(self, cor, km, marca):
            self.cor = cor
            self.km = km
            self.marca = marca
car = Car("verde", '1000km', 'GM')

print('A cor do carro é ',car.cor)
print('A km do carro é: ',car.km)
print('A marca do carro é: ',car.marca)

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def saudacao(self):
        print(f"Olá, meu nome é {self.nome} e tenho {self.idade} anos.")

# Criando um objeto da classe Pessoa
pessoa1 = Pessoa("Alice", 30)

# Chamando o método saudacao do objeto
pessoa1.saudacao()

class Cat:
  def __init__(self, cor, raca, dono):
    self.cor = cor
    self.raca = raca
    self.dono = dono
  def miar(self):
    print('miau')

  def correr(self):
    print('km 120')

  def comer():
    print('comendo')

cat = Cat('Preto', 'siâmes', 'Cacâ')
print(cat.cor)
print(cat.raca)
print(cat.dono)

"""1 - Crie uma classe chamada Cachorro com um atributo nome e um método
latir que imprima "Woof!" quando chamado. Em seguida, crie um objeto da
classe Cachorro e chame o método latir.
"""

class Dog:
    def __init__(self, nome):
        self.nome = nome

    def latir(self):
      print(f'{self.nome} Wooof! Woof!')

cachorro = Dog('Sky venha!',)
cachorro.latir()

"""2 - Crie uma classe chamada Retangulo com atributos largura e
altura. Adicione um método chamado calcular_area que retorna a área do retângulo.

"""

class Retangulo:
    def __init__(self, largura, altura):
      self.largura = largura
      self.altura = altura

    def calcular_area(self):
      print(f'A área do Retangulo é {int(self.largura) * int(self.altura)}')

area = Retangulo(3, 2)
area.calcular_area()

"""3: Crie uma classe chamada Carro com um atributo chamado velocidade
(inicialmente 0). Em seguida, adicione um método chamado acelerar que aumenta a
velocidade em 5 unidades a cada vez que é chamado.
"""

class Carro:
  def __init__(self, velocidade):
    self.velocidade = velocidade

  def acelerar(self):
    print(f'Pise o acelerador: {float(self.velocidade+5*1)} Pise novamente: {float(self.velocidade+10*1)}) Continue: {float(self.velocidade+15*1)} Sucessivamente...')

acelerador = Carro(0)
acelerador.acelerar()

"""4 - Crie uma classe chamada Gato que herda da classe Cachorro do exercício anterior.
 O método latir da classe Cachorro deve ser substituído por um método miar na classe
Gato que imprime "Miau!".
"""

class Gato(Dog):
  def __init__(self, nome):
    self.nome = nome

  def miar(self):
    print(f'{self.nome} miaau! miauu!')

gato = Gato('Cadê a minha Nina!')
gato.miar()